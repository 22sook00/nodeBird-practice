{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nvar initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signupData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\nexport var loginAction = function loginAction(data) {\n  return {\n    type: 'LOG_IN',\n    data: data\n  };\n};\nexport var logoutAction = function logoutAction() {\n  return {\n    type: 'LOG_OUT'\n  };\n};\n/*const changeNickname = {\n  type : 'CHANGE_NICKNAME',\n  data : '2sook0' -> 요부분이 바뀔때마다 하나씩 액션생성? 너무 비효율적.\n}\n//데이터가 바뀔때마다 액션을 만들어줘야하는데 ,비슷한객체가 반복되면 액션을 함수화 시키는것이 좋다.\n//action creator\nconst changeNickname = (data) => {\n  return {\n    type : 'LOG_IN',\n    data : data\n  }\n}\nchangeNickname('2sook0')\nstore.dispatch(changeNickname('hello'))\n*/\n//(이전상태, 액션) => 다음상태\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          //안바꾸고싶은것은 참조관계\n          isLoggedIn: true // 바꾸고싶은것만 명확하게\n\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          //안바꾸고싶은것은 참조관계\n          isLoggedIn: false // 바꾸고싶은것만 명확하게\n\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/2sook2/Desktop/인프런 강의/🦜react-nodeBird/front/reducers/index.js"],"names":["HYDRATE","initialState","user","isLoggedIn","signupData","loginData","post","mainPosts","loginAction","data","type","logoutAction","rootReducer","state","action","console","log","payload"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,oBAAtB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAG;AACLC,IAAAA,UAAU,EAAG,KADR;AAELD,IAAAA,IAAI,EAAG,IAFF;AAGLE,IAAAA,UAAU,EAAG,EAHR;AAILC,IAAAA,SAAS,EAAG;AAJP,GADY;AAOnBC,EAAAA,IAAI,EAAG;AACLC,IAAAA,SAAS,EAAG;AADP;AAPY,CAArB;AAWA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AACnC,SAAO;AACLC,IAAAA,IAAI,EAAG,QADF;AAELD,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CALM;AAMP,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,GAAM;AAChC,SAAO;AACLD,IAAAA,IAAI,EAAG;AADF,GAAP;AAGD,CAJM;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAME,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBZ,YAAyB;AAAA,MAAXa,MAAW;;AACpD,UAAOA,MAAM,CAACJ,IAAd;AACE,SAAKV,OAAL;AACEe,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBF,MAAtB;AACA,6CAAWD,KAAX,GAAqBC,MAAM,CAACG,OAA5B;;AACF,SAAK,QAAL;AACE,6CACKJ,KADL;AAEEX,QAAAA,IAAI,kCACCW,KAAK,CAACX,IADP;AACa;AACfC,UAAAA,UAAU,EAAG,IAFX,CAEiB;;AAFjB;AAFN;;AAOF,SAAK,SAAL;AACE,6CACKU,KADL;AAEEX,QAAAA,IAAI,kCACCW,KAAK,CAACX,IADP;AACa;AACfC,UAAAA,UAAU,EAAG,KAFX,CAEkB;;AAFlB;AAFN;;AAOF;AACE,aAAOU,KAAP;AArBJ;AAuBD,CAxBD;;AA0BA,eAAeD,WAAf","sourcesContent":["import {HYDRATE} from 'next-redux-wrapper';\n\nconst initialState = {\n  user : {\n    isLoggedIn : false,\n    user : null,\n    signupData : {},\n    loginData : {},\n  },\n  post : {\n    mainPosts : []\n  }\n}\nexport const loginAction = (data) => {\n  return {\n    type : 'LOG_IN',\n    data\n  }\n}\nexport const logoutAction = () => {\n  return {\n    type : 'LOG_OUT',\n  }\n}\n\n/*const changeNickname = {\n  type : 'CHANGE_NICKNAME',\n  data : '2sook0' -> 요부분이 바뀔때마다 하나씩 액션생성? 너무 비효율적.\n}\n//데이터가 바뀔때마다 액션을 만들어줘야하는데 ,비슷한객체가 반복되면 액션을 함수화 시키는것이 좋다.\n//action creator\nconst changeNickname = (data) => {\n  return {\n    type : 'LOG_IN',\n    data : data\n  }\n}\nchangeNickname('2sook0')\nstore.dispatch(changeNickname('hello'))\n*/\n//(이전상태, 액션) => 다음상태\nconst rootReducer = (state = initialState, action) => {\n  switch(action.type){\n    case HYDRATE:\n      console.log('HYDRATE',action)\n      return {...state, ...action.payload};\n    case 'LOG_IN' :\n      return {\n        ...state,\n        user : {\n          ...state.user, //안바꾸고싶은것은 참조관계\n          isLoggedIn : true, // 바꾸고싶은것만 명확하게\n        }\n      };\n    case 'LOG_OUT' :\n      return {\n        ...state,\n        user : {\n          ...state.user, //안바꾸고싶은것은 참조관계\n          isLoggedIn : false, // 바꾸고싶은것만 명확하게\n        }\n      };\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}